# .gitconfig
# Yves Chevallier 2024
[user]
	name = Yves Chevallier
	email = yves.chevallier@heig-vd.ch
	signingkey = CF2D28AFBD3AFBD4
[github]
    user  = yves-chevallier
    token = token
[credential]
	helper = /mnt/c/Program\\ Files/Git/mingw64/libexec/git-core/git-credential-manager-core.exe
[core]
    editor = vim 
	ignorecase = false
    autocrlf = false
    filemode = false
    whitespace = cr-at-eol
	pager = cat
[help]
    autocorrect = 1
[color]
    ui = auto
[web]
    browser = google-chrome
[advice]
    pushNonFastForward = false
    statusHints = false
    commitBeforeMerge = false
    resolveConflict = false
    implicitIdentity = false
    detachedHead = false

[color "grep"]
    linenumber = yellow bold
    match = red
    filename = green
    function = magenta

[color "status"]
    added = "#99cc99"
    changed = "#f2777a"
    untracked = "#ffcc66"
    deleted = magenta bold
    branch = "#6699cc" bold
    nobranch = bold ul blink "#f99157"

[rerere]
    enabled = true
    autoUpdate = true

[rebase]
    stat = true

[pull]
    rebase = true

[push]
    default = simple

[grep]
    patternType = perl
    lineNumber = true

[diff]
    tool = bc4

[difftool]
    prompt = false

[difftool "bc4"]
    cmd = "\"/mnt/c/Program Files/Beyond Compare 4/BComp.exe\" \"$(wslpath -w \"$LOCAL\")\" \"$(wslpath -w \"$REMOTE\")\" /lefttitle=\"$(wslpath -w \"$LOCAL\")\" /righttitle=\"$(wslpath -w \"$REMOTE\")\""

[merge]
    tool = bc4

[log]
    abbrevCommit = true
    decorate = true
    date = iso

[mergetool]
    prompt = false
    keepBackup = false
    keepTemporaries = true

[mergetool "bc4"]
    cmd = "\"/mnt/c/Program Files/Beyond Compare 4/Bcomp.exe\" \"$(wslpath -w \"$LOCAL\")\" \"$(wslpath -w \"$REMOTE\")\" \"$(wslpath -w \"$BASE\")\" \"$(wslpath -w \"$MERGED\")\""

[alias]
    # Checkout
    o  = checkout
    ob = checkout -b

    # Move HEAD forward/Backward
    fw = "!git log --pretty=oneline --all | grep -B1 `git rev-parse HEAD` | head -n1 | egrep -o '[a-f0-9]{20,}' | xargs git checkout"
    bw = "!git checkout HEAD~1"

    # Branches
    b  = branch
    lsb = "!git for-each-ref --sort=-committerdate refs/heads/ \
        --format='%(color:blue)%(objectname:short)%(color:bold green) %(refname:short)%(color:reset) %(contents:subject)%(color:dim white) - %(authorname) %(color:reset)%(color:yellow)(%(color:green)%(committerdate:relative)%(color:reset)%(color:yellow))%(color:reset)'"
    # Commit
    c   = commit
    ca  = commit -a               # Stage all modified files
    cm  = commit -m               # Commit with message
    cam = commit -a -m            # Commit all modified files with message

    # Status
    s   = status -s -b            # Status in short format
    su  = status -s -b -uno       # Doesn't show untracked files

    # Diff
    d   = diff
    dh  = diff HEAD               # Diff Filesystem <-> HEAD
    dc  = diff -C --cached        # Diff Staged     <-> HEAD
    ds  = diff -C --ignore-space-at-eol --ignore-space-change
    dt  = difftool

    # Integrity
    fk = fsck                     # Verifies the connectivity and validity of the db
    fu = fsck --unreachable       # List commits unlinked to any reference nodes

    # Grep
    g  = grep --show-function --heading --break -I
    gh = "!f() { git g $2 $(git rev-list --max-count=$1 HEAD); }; f"

    # Replace
    pie = "!f() {                                    \
        git ls-files -z | xargs -0 perl -e '         \
        my $eval = shift @ARGV;                      \
        foreach my $file (@ARGV) {                   \
        next unless -f $file;                        \
        open my $fd, $file;                          \
        my $content = do { local $/; <$fd>};         \
        close $fd;                                   \
        my $new = do { $_ = $content; eval $eval; }; \
        if ($content ne $new) {                      \
        open my $fd, \">\", $file;                   \
        print $fd $_;                                \
        close $fd;                                   \
        }                                            \
        }                                            \
        ' \"$1\"; }; f"

    # Log / Tree
    l = log -n30 --boundary --graph --pretty=format:'%C(bold blue)%h%C(bold green)%<|(20)% ar%C(reset)%C(white)% s %C(dim white)-% an%C(reset)%C(auto)% d%C(bold red)% N'
    la = log -n30 --boundary --graph --pretty=format:'%C(bold blue)%h%C(bold green)%<|(20)% ai%C(reset)%C(white)% s %C(dim white)-% an%C(reset)%C(auto)% d%C(bold red)% N'

    # Files
    ls = ls-files

    # Clean
    x  = clean -xfd
    xx = !git clean -xfd && git reset --hard HEAD

    # Merge
    m = merge
    ma = merge --abort
    mc = merge --continue
    ms = merge --skip

    # Reset
    r = reset HEAD
    rh = reset --hard HEAD

[init]
	templateDir = /usr/share/git-core/templates

[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
[safe]
	directory = /srv
